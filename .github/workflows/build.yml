name: Build static ffmpeg

on:
  push:
  pull_request:
  workflow_dispatch:


jobs:
  package-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch:
          - x86_64
          #- arm64
    env:
      ARCH: ${{ matrix.arch }}
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-get update -y && \
          sudo apt-get install -y yasm lame libmp3lame-dev libopus-dev libvorbis-dev libogg-dev
      - name: Remove vorbis, ogg, opus and lame .so files # or it just dynamically links!
        run: |
          sudo find /usr/lib/x86_64-linux-gnu -type f -name "*lame*.so*" -exec rm -f {} +
          sudo find /usr/lib/x86_64-linux-gnu -type f -name "*opus*.so*" -exec rm -f {} +
          sudo find /usr/lib/x86_64-linux-gnu -type f -name "*vorbis*.so*" -exec rm -f {} +
          sudo find /usr/lib/x86_64-linux-gnu -type f -name "*libogg*.so*" -exec rm -f {} +
      - name: Install ARM64 compiler
        if: env.ARCH == 'arm64'
        run: |
          sudo apt-get update -y && \
          sudo apt-get install -y gcc-aarch64-linux-gnu
      - name: Build
        run: ./build-linux.sh

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-linux-${{ env.ARCH }}
          path: artifacts/

  package-windows:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch:
          - x86_64
    env:
      ARCH: ${{ matrix.arch }}
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-get update -y && \
          sudo apt-get install -y yasm mingw-w64 libopus-dev libvorbis-dev
      - name: Install dependencies
        run: |
            pacman -Syu --noconfirm
            pacman -S --needed --noconfirm \
              mingw-w64-x86_64-lame \
              mingw-w64-x86_64-libvorbis \
              mingw-w64-x86_64-libogg \
              mingw-w64-x86_64-libopus
      - name: Verify lib locations
        run: |
          ls -al /mingw64/include/lame
          ls -al /mingw64/lib/
          # # Download LAME source code
          # wget https://downloads.sourceforge.net/project/lame/lame/3.100/lame-3.100.tar.gz
          # tar -xzf lame-3.100.tar.gz
          # cd lame-3.100

          # # Configure and build for Windows
          # ./configure --arch=x86_64 --host=x86_64-w64-mingw32 --target-os=mingw32 --build=mingw32 --disable-shared --enable-static --disable-doc --disable-man --disable-html --disable-frontend CC=x86_64-w64-mingw32-gcc

          # make -j8
          # sudo make install
      # - name: Verify lib locations
      #   run: |
      #     ls -al /usr/local/include/lame
      #     ls -al /usr/local/lib/
      - name: Build
        run: ./build-windows.sh
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-windows-${{ env.ARCH }}
          path: artifacts/

  package-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        # https://developer.apple.com/documentation/apple-silicon/building-a-universal-macos-binary#Update-the-Architecture-List-of-Custom-Makefiles
        target:
          # - x86_64-apple-macos10.9
          - arm64-apple-macos14
    env:
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: brew install yasm lame opus libvorbis libogg
      - name: Remove vorbis, ogg, opus and lame .dylib files # or it just dynamically links!
        run: |
          find /opt/homebrew -type f -name "*lame*.dylib" -exec rm -f {} +
          find /opt/homebrew -type f -name "*opus*.dylib" -exec rm -f {} +
          find /opt/homebrew -type f -name "*vorbis*.dylib" -exec rm -f {} +
          find /opt/homebrew -type f -name "*libogg*.dylib" -exec rm -f {} +
      - name: Build
        run: ./build-macos.sh
      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ matrix.target }}
          path: artifacts/

  release:
    runs-on: ubuntu-latest
    needs:
      - package-linux
      # - package-windows
      - package-macos
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts/
      - name: Make tarballs
        run: |
          mkdir artifacts/release/
          cd artifacts/
          for dir in ffmpeg-*/ffmpeg-*
          do
            name=$(basename $dir)
            tar czf release/$name.tar.gz -C $(dirname $dir) $name
          done
          ls -l release/
      - name: GH Release
        uses: softprops/action-gh-release@v2.0.9
            
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          files: artifacts/release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
